# This is a basic workflow to help you get started with Actions

name: Build and deploy to sandbox

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      ci_cd_client_id: ${{secrets.CI_CD_CLIENT_ID}}
      ci_cd_client_secret: ${{secrets.CI_CD_CLIENT_SECRET}}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
          restore-keys: |
            ${{runner.os}}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
           java-version: 11
           distribution: 'zulu'
      
      
      # Runs a single command using the runners shell
      - name: Build with Maven
        run: |
          artifactNamel=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse -short "SGITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/ jar/-$commitHash.jar/g*)
          mv $artifactName1 $artifactName2
      
      - name: Upload artifact
        uses: actions/upload-artifact@main
        with: 
          name: artifacts
          path: target/*.jar
      # Runs a set of commands using the runners shell
     
  upload:
        needs: build
        runs-on: ubuntu-latest 
        env:
          ci_cd_client_id: ${{secrets.CI_CD_CLIENT_ID}}
          ci_cd_client_secret: ${{secrets.CI_CD_CLIENT_SECRET}}
        steps:
        - uses: actions/checkout@v3
        - uses: actions/cache@v3
          with: 
            path: ~/.m2/repository
            key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
            restore-keys: |
              ${{runner.os}}-maven-
        - uses: actions/download-artifact@master
          with:
            name: artifacts
        - name : Deploy to Sandbox
          run: |
             artifactName=$(ls *.jar | head -1)
             mvn deploy -DmuleDeploy \ 
             -Dmule.artifact=$artifactName \
             -B .maven/settings.xml \ 
             -DskipTests \
             -DskipDeploymentVerification="true"
       
