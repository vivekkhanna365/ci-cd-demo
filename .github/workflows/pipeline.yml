# This is a basic workflow to help you get started with Actions

name: Build and deploy to sandbox
#Yaml action file

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
          restore-keys: |
            ${{runner.os}}-maven-

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
           java-version: 1.8

      - name: Add repo credentials 
        uses: s4u/maven-settings-action@v2.4.0
        with:
          servers: |
             [{
               "id":  "mule-enterprise",
               "username" :${{secrets.mule_nexus_username}}
               "password" :${{secrets.mule_nexus_password}}
             }]
      
      
      # Runs a single command using the runners shell
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Stamp artifact with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2
      
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with: 
          name: artifacts
          path: target/*.jar
      # Runs a set of commands using the runners shell
     
  # upload:
  #       needs: build
  #       runs-on: ubuntu-latest 
  #       env:
  #         ci_cd_client_id: ${{secrets.CI_CD_CLIENT_ID}}
  #         ci_cd_client_secret: ${{secrets.CI_CD_CLIENT_SECRET}}
  #       steps:
  #       - uses: actions/checkout@v3
  #       - uses: actions/cache@v3
  #         with: 
  #           path: ~/.m2/repository
  #           key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
  #           restore-keys: |
  #             ${{runner.os}}-maven-
  #       - uses: actions/download-artifact@master
  #         with:
  #           name: artifacts
  #       - name: Upload to exchange
  #         run: |
  #           artifactName=$(ls *.jar | head -1)
  #           mvn deploy \
  #           -s .maven/settings.xml \
  #           -Dmule.artifact=$artifactName \
        
        
  deploy:
        needs: build
        runs-on: ubuntu-latest 
        env:
          ci_cd_client_id: ${{secrets.CI_CD_CLIENT_ID}}
          ci_cd_client_secret: ${{secrets.CI_CD_CLIENT_SECRET}}
        steps:
        - uses: actions/checkout@v3
        - uses: actions/cache@v3
          with:
            path: ~/.m2/repository
            key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
            restore-keys: |
                ${{runner.os}}-maven-
        - uses: actions/download-artifact@master
          with:
           name: artifacts

        - name: Deploy to sandbox
          run: |
            artifactName=$(ls *.jar | head -1)
             mvn deploy -DmuleDeploy \
             -Dmule.artifact=$artifactName \
             -Dclient.id="$ci_cd_client_id" \
             -Dclient.secret="$Sci_cd_client_secret" 
